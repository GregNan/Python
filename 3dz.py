# 30). Вычислить число π c заданной точностью d
# Пример:
# при d = 0.001,π = 3.141 10^(-1)≤d≤10^(-10)

a = 22.0
b= 7.0
p = (round(a/b*1000))/1000
p1 = round((a/b),3)
print(p1)
print(p)


# 31). Задайте натуральное число N. Напишите программу, которая составит список простых множителей числа N.
# 70 = 2*5*7 => [2, 5, 7]
# 140 = 2*2*5*7 => [2, 2, 5, 7]
# 140|2
# 70|2
# 35|5
# 7|7

# a=int(input('vved chislo'))
# list=[]
# for i in range(2,a):
    
#     if a%i==0:
#         list.append(i)
#         f=a
#         f=f//i 
                     
#     else:
#         i=i+1   
         
# print('{}|{}' .format(a,list))

 



# 32). Задайте последовательность чисел. Напишите программу, 
# которая выведет список неповторяющихся элементов исходной последовательности.
# numbers = [1, 2, 2, 3, 3, 4, 5]
# unique_numbers = list(set(numbers))
# print(unique_numbers)

# 33). Задана натуральная степень k. Сформировать случайным образом список коэффициентов (значения от 0 до 100) многочлена 
# и записать в файл многочлен степени k и приравняйте его к нулю.
# Пример:
# k=2 => 2x² + 4x + 5 = 0 или x² + 5 = 0 или 10*x² = 0
# 2*x*2 + 4*x + 5 = 0
# или
# 2*x^2 + 4*x + 5 = 0
# 34). Даны два файла, в каждом из которых находится запись многочлена, приравненного к нулю. Задача - сформировать файл, содержащий сумму многочленов (суммируем подобные слагаемые).
# Пример:
# 1 Файл : 2*x2 + 4*x + 5 = 0
# 2 Файл : 4*x2 + 7*x + 9 = 0
# 3 Файл: (содержит результат) 6*x2 + 11*x + 14 = 0
# Пример:
# 1 Файл : 2*x3 + 4*x2 + 5*x + 1 = 0
# 2 Файл : 4*x2 + 7*x + 9 = 0
# 3 Файл: (содержит результат) 2*x3 + 8*x2 + 12
# 1. В задании 1 необходимо либо запросить число для определения точности у пользователя, либо задать самостоятельно. Точность определяется количеством знаков в дробной части(как в примере). Предлагаю следующий вариант решения:

# from math import pi as PI

# ACCURACY_VAL_START = 10**(-10)
# ACCURACY_VAL_END = 10**(-1)

# LBL_ZERO = 0

# accuracy = input('Введите точность числа: ')

# try:
#         if not (ACCURACY_VAL_START <= float(accuracy) <= ACCURACY_VAL_END):
#                 raise ValueError

#         print(
#                 round(PI, len(accuracy.split('.')[1])
#                       )
#         )



# except ValueError:
#         print('Укажите веществнное число в диапазоне [10^(-1), 10^(-10)]. Разделитель дробной и целой части - \'.\'')
# Не рекомендуется использовать зарезервированные имена в качестве имен собственных переменных. В Вашей реализации - list
# В задании 2 ответ неверный. Необходимо отобразить не просто делители числа, а простые множители. Т.Е. каждый из множителей должен быть простым числом. Получить список чисел возможно с использованием алгоритма Решето Эратосфена